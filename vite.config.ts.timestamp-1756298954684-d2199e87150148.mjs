// vite.config.ts
import { defineConfig } from "file:///C:/Dev/super-benji/node_modules/vite/dist/node/index.js";
import path from "path";
import fs from "fs/promises";
import typescriptPlugin from "file:///C:/Dev/super-benji/node_modules/@rollup/plugin-typescript/dist/index.js";
import { Packer } from "file:///C:/Dev/super-benji/node_modules/roadroller/index.mjs";
import CleanCSS from "file:///C:/Dev/super-benji/node_modules/clean-css/index.js";
import { statSync } from "fs";
import { execFileSync } from "child_process";
import ect from "file:///C:/Dev/super-benji/node_modules/ect-bin/index.js";
import htmlMinify from "file:///C:/Dev/super-benji/node_modules/html-minifier/src/htmlminifier.js";
import tmp from "file:///C:/Dev/super-benji/node_modules/tmp/lib/tmp.js";
import closure from "file:///C:/Dev/super-benji/node_modules/google-closure-compiler/index.js";
var __vite_injected_original_dirname = "C:\\Dev\\super-benji";
var { compiler: ClosureCompiler } = closure;
var vite_config_default = defineConfig(({ command, mode }) => {
  const config = {
    server: {
      port: 3e3
    },
    resolve: {
      alias: {
        "@": path.resolve(__vite_injected_original_dirname, "./src")
      }
    },
    plugins: void 0
  };
  if (command === "build") {
    config.esbuild = false;
    config.base = "";
    config.build = {
      minify: false,
      target: "es2020",
      modulePreload: { polyfill: false },
      assetsInlineLimit: 800,
      assetsDir: "",
      rollupOptions: {
        output: {
          inlineDynamicImports: true,
          manualChunks: void 0,
          assetFileNames: `[name].[ext]`
        }
      }
    };
    config.plugins = [
      typescriptPlugin(),
      closurePlugin(),
      roadrollerPlugin(),
      ectPlugin()
    ];
  }
  return config;
});
function closurePlugin() {
  return {
    name: "closure-compiler",
    // @ts-ignore
    renderChunk: applyClosure,
    enforce: "post"
  };
}
async function applyClosure(js, chunk) {
  const tmpobj = tmp.fileSync();
  js = js.replaceAll("const ", "let ");
  await fs.writeFile(tmpobj.name, js);
  const closureCompiler = new ClosureCompiler({
    js: tmpobj.name,
    externs: "externs.js",
    compilation_level: "ADVANCED",
    language_in: "ECMASCRIPT_2020",
    language_out: "ECMASCRIPT_2020"
  });
  return new Promise((resolve, reject) => {
    closureCompiler.run((_exitCode, stdOut, stdErr) => {
      if (stdOut !== "") {
        resolve({ code: stdOut });
      } else if (stdErr !== "") {
        reject(stdErr);
        return;
      }
      console.warn(stdErr);
    });
  });
}
function roadrollerPlugin() {
  return {
    name: "vite:roadroller",
    transformIndexHtml: {
      enforce: "post",
      transform: async (html, ctx) => {
        if (!ctx || !ctx.bundle) {
          return html;
        }
        const options = {
          includeAutoGeneratedTags: true,
          removeAttributeQuotes: true,
          removeComments: true,
          removeRedundantAttributes: true,
          removeScriptTypeAttributes: true,
          removeStyleLinkTypeAttributes: true,
          sortClassName: true,
          useShortDoctype: true,
          collapseWhitespace: true,
          collapseInlineTagWhitespace: true,
          removeEmptyAttributes: true,
          removeOptionalTags: true,
          sortAttributes: true,
          minifyCSS: true
        };
        const bundleOutputs = Object.values(ctx.bundle);
        const javascript = bundleOutputs.find(
          (output) => output.fileName.endsWith(".js")
        );
        const css = bundleOutputs.find(
          (output) => output.fileName.endsWith(".css")
        );
        const otherBundleOutputs = bundleOutputs.filter(
          (output) => output !== javascript
        );
        if (otherBundleOutputs.length > 0) {
          otherBundleOutputs.forEach(
            (output) => console.warn(`WARN Asset not inlined: ${output.fileName}`)
          );
        }
        const cssInHtml = css ? embedCss(html, css) : html;
        const minifiedHtml = await htmlMinify.minify(cssInHtml, options);
        return embedJs(minifiedHtml, javascript);
      }
    }
  };
}
async function embedJs(html, chunk) {
  const scriptTagRemoved = html.replace(
    new RegExp(`<script[^>]*?src=[./]*${chunk.fileName}[^>]*?></script>`),
    ""
  );
  const htmlInJs = `document.write('${scriptTagRemoved}');` + chunk.code.trim();
  const inputs = [
    {
      data: htmlInJs,
      type: "js",
      action: "eval"
    }
  ];
  let options;
  if (process.env.USE_RR_CONFIG) {
    try {
      options = JSON.parse(
        await fs.readFile(`${__vite_injected_original_dirname}/roadroller-config.json`, "utf-8")
      );
    } catch (error) {
      throw new Error(
        "Roadroller config not found. Generate one or use the regular build option"
      );
    }
  } else {
    options = { allowFreeVars: true };
  }
  const packer = new Packer(inputs, options);
  await Promise.all([
    fs.writeFile(`${path.join(__vite_injected_original_dirname, "dist")}/output.js`, htmlInJs),
    packer.optimize(process.env.LEVEL_2_BUILD ? 2 : 0)
    // Regular builds use level 2, but rr config builds use the supplied params
  ]);
  const { firstLine, secondLine } = packer.makeDecoder();
  return `<script>
${firstLine}
${secondLine}
</script>`;
}
function embedCss(html, asset) {
  const reCSS = new RegExp(
    `<link rel="stylesheet"[^>]*?href="[./]*${asset.fileName}"[^>]*?>`
  );
  const code = `<style>${new CleanCSS({ level: 2 }).minify(asset.source).styles}</style>`;
  return html.replace(reCSS, code);
}
function ectPlugin() {
  return {
    name: "vite:ect",
    writeBundle: async () => {
      try {
        const files = await fs.readdir("dist/");
        const assetFiles = files.filter((file) => {
          return !file.includes(".js") && !file.includes(".css") && !file.includes(".html") && !file.includes(".zip") && file !== "assets";
        }).map((file) => "dist/" + file);
        const args = [
          "-strip",
          "-zip",
          "-10009",
          "dist/index.html",
          ...assetFiles
        ];
        const result = execFileSync(ect, args);
        console.log("ECT result", result.toString().trim());
        const stats = statSync("dist/index.zip");
        console.log("ZIP size", stats.size);
      } catch (err) {
        console.log("ECT error", err);
      }
    }
  };
}
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
